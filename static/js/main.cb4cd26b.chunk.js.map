{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aboutText","role","aria-haspopup","aria-labelledby","tabindex","aria-disabled","placeholder","class","onClick","togglemode","htmlFor","TextForm","text","setText","useState","Fragment","heading","value","onChange","event","console","log","target","rows","handleUpClick","newTEXT","toUpperCase","handleloClick","toLowerCase","split","length","About","data-bs-toggle","data-bs-target","data-bs-parent","App","setMode","toggleMode","prevState","document","body","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cb4cd26b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item active\">\r\n                <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n              </li>\r\n              <li className=\"nav-item dropdown\">\r\n                <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                  Dropdown\r\n                </a>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                  <a className=\"dropdown-item\" href=\"/\">Action</a>\r\n                  <a className=\"dropdown-item\" href=\"/\">Another action</a>\r\n                  <div className=\"dropdown-divider\"></div>\r\n                  <a className=\"dropdown-item\" href=\"/\">Something else here</a>\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link disabled\" href=\"/\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n              </li>\r\n            </ul>\r\n            <form className=\"form-inline my-2 my-lg-0\">\r\n              <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-primary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div class={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.togglemode} id=\"flexSwitchCheckDefault\"/>\r\n                <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n              </div>\r\n          </div>\r\n        </nav>\r\n  )\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick=()=>{\r\n    console.log('uppercase was clicked'+ text);\r\n    let newTEXT=text.toUpperCase();\r\n    setText(newTEXT);\r\n    \r\n  }\r\n  const handleloClick=()=>{\r\n    console.log('lowercase was clicked'+ text);\r\n    let newTEXT=text.toLowerCase();\r\n    setText(newTEXT);\r\n    \r\n  }\r\n  const handleonChange=(event)=>{\r\n    console.log('on change');\r\n    setText(event.target.value)\r\n    \r\n  }\r\n  const [text,setText]=useState(\"enter the text here\");\r\n\r\n \r\n  return (\r\n    <>\r\n    <div className='container'>\r\n      <h1>{props.heading}</h1>\r\n        <div class=\"mb-3\">\r\n         \r\n          <textarea className=\"form-control\" value={text} onChange={handleonChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className='btn  btn-primary mx-2' onClick={handleUpClick}>Convert to upperrcase</button>\r\n        <button className='btn  btn-primary mx-2' onClick={handleloClick}>Convert to Lowercase</button>\r\n    </div>\r\n    <div className=\"container my-3\">\r\n      <h1>your text summary</h1>\r\n      <p>{text.split(\" \").length} word and {text.length} characters</p>\r\n      <p>{0.008*text.split(\" \").length} Minutes </p>\r\n      <h2>Preview</h2>\r\n      <p>{text}</p>\r\n\r\n\r\n    </div>\r\n    </>\r\n    \r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n  \r\n  return (\r\n    <div className='container' >\r\n                    <div class=\"accordion\" id=\"accordionExample\">\r\n                        <div class=\"accordion-item\">\r\n                            <h2 class=\"accordion-header\">\r\n                            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                            </h2>\r\n                            <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                            <div class=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"accordion-item\">\r\n                            <h2 class=\"accordion-header\">\r\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                            </h2>\r\n                            <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                            <div class=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"accordion-item\">\r\n                            <h2 class=\"accordion-header\">\r\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                            </h2>\r\n                            <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                            <div class=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                \r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'; // Import React and useState\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport './App.css'; // Import stylesheet\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'; // Import routing components\n\nfunction App() {\n  const [mode, setMode] = useState('dark'); // Use state for dark mode\n\n  const toggleMode = () => {\n    setMode((prevState) => (prevState === 'light' ? 'dark' : 'light')); // Functional state update\n    document.body.style.backgroundColor = mode === 'light' ? 'white' : 'black'; // Set background color based on mode\n  };\n\n  return (\n    <>\n    \n      <Navbar title=\"textutilis\" mode={mode} toggleMode={toggleMode} />\n      <div className=\"container\">\n        <TextForm heading=\"Enter the text to search\" />\n        \n        <About />\n      </div>\n     \n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}